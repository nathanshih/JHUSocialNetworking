package com.jhu.socialnetworking.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.jhu.socialnetworking.dao.CourseDAO;
import com.jhu.socialnetworking.dao.EvaluationDAO;
import com.jhu.socialnetworking.dao.ProfessorDAO;
import com.jhu.socialnetworking.dao.RegistrationDAO;
import com.jhu.socialnetworking.dao.StudentConnectionDAO;
import com.jhu.socialnetworking.dao.StudentDAO;
import com.jhu.socialnetworking.model.Course;
import com.jhu.socialnetworking.model.Evaluation;
import com.jhu.socialnetworking.model.Professor;
import com.jhu.socialnetworking.model.Registration;
import com.jhu.socialnetworking.model.Student;
import com.jhu.socialnetworking.model.StudentConnection;

/**
 * Performs the initialization of the database once for the application using
 * singleton pattern
 * 
 * @author chris
 *
 */
public class InitializeDatabase {

	/**
	 * The datasource used to perist JERCs data
	 */
	private DataSource dataSource;

	/**
	 * The single instance of the database initializer using the singleton
	 * pattern
	 */
	private static InitializeDatabase instance = null;

	/**
	 * True if the database is initialized
	 */
	private boolean isDatabaseInitialized = false;

	/**
	 * Get the single instance of the database initializer
	 */
	public static InitializeDatabase getInstance() {
		if (instance == null) {
			instance = new InitializeDatabase();
		}
		return instance;
	}

	protected InitializeDatabase() {
		// Exists only to defeat instantiation.
	}

	/**
	 * Initializes the database and each of its tables once
	 * 
	 * @param dataSource
	 *            the datasource used to perist JERCs data
	 */
	public void initializeDatabase(DataSource dataSource) {

		// if the database is initialized, don't initialize it again
		if (!isDatabaseInitialized) {

			// set the database based on the datasource provided by the caller
			this.dataSource = dataSource;

			// configure the student table
			initializeStudentTable();

			// configure the course table
			initializeCourseTable();

			// configure the professor table
			initializeProfessorTable();

			// configure the evaluation table
			initializeEvaluationTable();

			// configure the registration table
			initializeRegistrationTable();

			// configure the student connection table
			initializeStudentConnectionTable();
			
			// configure the completed courses table
			initializeCompletedCourseTable();

			// the database is initalized; don't initialize it again
			isDatabaseInitialized = true;
			
			// prepopulate the database with some data
			prepopulateDatabase();
		}
	}

	/**
	 * Creates the CompletedCourses table
	 */
	public void initializeCompletedCourseTable() {
		
		String sql = null;
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			// create a CompletedCourse table
			sql = "CREATE TABLE CompletedCourse ("
					+ "completed_course_id int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, "
					+ "course_id int, " + "student_id int, "
					+ "PRIMARY KEY (completed_course_id));";
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.execute();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		
	}
	
	
	/**
	 * Creates the StudentConnection table to persist evaluation data
	 */
	public void initializeStudentConnectionTable() {

		String sql = null;
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			// create a StudentConnection table with a evaluation_id as the
			// primary key
			sql = "CREATE TABLE StudentConnection ("
					+ "connection_id int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, "
					+ "first_student_id int, " + "second_student_id int, "
					+ "PRIMARY KEY (connection_id));";
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.execute();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}

	}

	/**
	 * Creates the REGISTRATION table to persist evaluation data
	 */
	public void initializeRegistrationTable() {

		String sql = null;
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			// create a REGISTRATION table with a evaluation_id as the primary
			// key
			sql = "CREATE TABLE Registration ("
					+ "registration_id int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, "
					+ "student_id int, " + "course_id varchar(200), "
					+ "professor_id int, " + "semester varchar(1000), "
					+ "year int, " + "PRIMARY KEY (registration_id));";
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.execute();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}

	}

	/**
	 * Creates the EVALUATION table to persist evaluation data
	 */
	public void initializeEvaluationTable() {

		String sql = null;
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			// create a EVALUATION table with a evaluation_id as the primary key
			sql = "CREATE TABLE Evaluation ("
					+ "evaluation_id int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, "
					+ "registration_id int, " + "rating varchar(1000), "
					+ "comments varchar(1000), "
					+ "PRIMARY KEY (evaluation_id));";
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.execute();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}

	}

	/**
	 * Creates the COURSE table to persist course data
	 */
	public void initializeCourseTable() {

		String sql = null;
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			// create a COURSE table with a course_id as the primary key
			sql = "CREATE TABLE Course (" + "course_id varchar(200), "
					+ "course_name varchar(200), "
					+ "description varchar(1000), "
					+ "discipline varchar(1000), "
					+ "usersCompleted int, "
					+ "usersCheckedOut int, "
					+ "PRIMARY KEY (course_id));";
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.execute();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}

	}

	/**
	 * Creates the STUDENT table to persist student data
	 */
	public void initializeStudentTable() {

		String sql = null;
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			// create a STUDENT table with a student_id as the primary key
			// include a first name and last name for each student
			sql = "CREATE TABLE Student ("
					+ "student_id int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, "
					+ "name varchar(30), " + "email varchar(30), " + "password varchar(30), " + "discipline varchar(30), "
					+ "PRIMARY KEY (student_id));";
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.execute();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		
	}

	/**
	 * Creates the PROFESSOR table to persist student data
	 */
	public void initializeProfessorTable() {

		String sql = null;
		Connection conn = null;
		PreparedStatement ps = null;

		try {

			// create a PROFESSOR table with a professor_id as the primary key
			// include a first name and last name for each professor
			sql = "CREATE TABLE Professor ("
					+ "professor_id int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, "
					+ "name varchar(200), " + "PRIMARY KEY (professor_id));";
			conn = dataSource.getConnection();
			ps = conn.prepareStatement(sql);
			ps.execute();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}

	}

	/**
	 * Prepopulate the database with some data
	 */
	private void prepopulateDatabase() {

		ApplicationContext context = new ClassPathXmlApplicationContext(
				"Spring-Module.xml");

		// Get a student DAO to add some students
		StudentDAO studentDAO = (StudentDAO) context.getBean("studentDAO");

		// Add some students
		Student student = new Student();
		student.setName("Chris Karlen");
		student.setEmail("chris@email.com");
		student.setPassword("password1");
		student.setDiscipline("Computer Science");
		studentDAO.insert(student);

		student = new Student();
		student.setName("Nathan Shih");
		student.setEmail("nathan@email.com");
		student.setPassword("password2");
		student.setDiscipline("Computer Science");
		studentDAO.insert(student);

		student = new Student();
		student.setName("Arthur Tucker");
		student.setEmail("arthur@email.com");
		student.setPassword("password3");
		student.setDiscipline("Computer Science");
		studentDAO.insert(student);

		// Get a professor DAO to add some professors
		ProfessorDAO professorDAO = (ProfessorDAO) context
				.getBean("professorDAO");

		// Add some professors
		Professor professor1 = new Professor();
		professor1.setName("John Sheppard");
		professorDAO.insert(professor1);

		Professor professor2 = new Professor();
		professor2.setName("Kiran Chittargi");
		professorDAO.insert(professor2);

		// Get a course DAO to add some courses
		CourseDAO courseDAO = (CourseDAO) context.getBean("courseDAO");

		// Add some courses
		Course course1 = new Course();
		course1.setCourseId("605.421");
		course1.setCourseName("Foundations of Algorithms");
		course1.setDescription("This follow-on course to data structures (e.g., 605.202) provides a survey of computer algorithms, examines fundamental techniques in algorithm design and analysis, and develops problem-solving skills required in all programs of study involving computer science.");
		course1.setDiscipline("Computer Science");
		course1.setUsersCompleted(0);
		course1.setUsersCheckedOut(0);
		courseDAO.insert(course1);

		Course course2 = new Course();
		course2.setCourseId("605.411");
		course2.setCourseName("Foundations of Computer Architecture");
		course2.setDescription("This course provides a detailed examination of the internal structure and operation of modern computer systems.");
		course2.setDiscipline("Computer Science");
		course2.setUsersCompleted(0);
		course2.setUsersCheckedOut(0);
		courseDAO.insert(course2);

		Course course3 = new Course();
		course3.setCourseId("605.747");
		course3.setCourseName("Evolutionary Computation");
		course3.setDescription("This course explores how principles from theories of evolution and natural selection can be used to construct machines that exhibit nontrivial behavior..");
		course3.setDiscipline("Computer Science");
		course3.setUsersCompleted(0);
		course3.setUsersCheckedOut(0);
		courseDAO.insert(course3);

		// Get a registration DAO to add some registrations
		RegistrationDAO registrationDAO = (RegistrationDAO) context
				.getBean("registrationDAO");

		// Add some registrations
		Registration registration1 = new Registration();
		registration1.setCourseId(course1.getCourseId());
		registration1.setProfessorId(1);
		registration1.setStudentId(1);
		registration1.setSemester("Fall");
		registration1.setYear(2014);
		registrationDAO.insert(registration1);

		Registration registration2 = new Registration();
		registration2.setCourseId(course2.getCourseId());
		registration2.setProfessorId(2);
		registration2.setStudentId(2);
		registration2.setSemester("Spring");
		registration2.setYear(2013);
		registrationDAO.insert(registration2);

		Registration registration3 = new Registration();
		registration3.setCourseId(course1.getCourseId());
		registration3.setProfessorId(1);
		registration3.setStudentId(2);
		registration3.setSemester("Fall");
		registration3.setYear(2014);
		registrationDAO.insert(registration3);

		Registration registration4 = new Registration();
		registration4.setCourseId(course2.getCourseId());
		registration4.setProfessorId(2);
		registration4.setStudentId(1);
		registration4.setSemester("Spring");
		registration4.setYear(2013);
		registrationDAO.insert(registration4);

		// Get an evaluation DAO to add and remove evaluations
		EvaluationDAO evaluationDAO = (EvaluationDAO) context
				.getBean("evaluationDAO");

		// Add some evaluations
		Evaluation evaluation = new Evaluation();
		evaluation.setComments("This class was fantastic");
		evaluation.setRating("5");
		evaluation.setRegistrationId(1);
		evaluationDAO.insert(evaluation);

		evaluation = new Evaluation();
		evaluation.setComments("This class was phenomenal");
		evaluation.setRating("4");
		evaluation.setRegistrationId(2);
		evaluationDAO.insert(evaluation);

		evaluation = new Evaluation();
		evaluation.setComments("This class was amazing");
		evaluation.setRating("3");
		evaluation.setRegistrationId(3);
		evaluationDAO.insert(evaluation);

		evaluation = new Evaluation();
		evaluation.setComments("This class was incredible");
		evaluation.setRating("2");
		evaluation.setRegistrationId(4);
		evaluationDAO.insert(evaluation);
		
		// Add some student connections
		StudentConnectionDAO studentConnectionDAO = (StudentConnectionDAO) context
				.getBean("studentConnectionDAO");
		
		studentConnectionDAO.insert(new StudentConnection(1, 2));
		studentConnectionDAO.insert(new StudentConnection(2, 1));
		studentConnectionDAO.insert(new StudentConnection(1, 3));

	}
}
